import{_ as s,o as i,c as a,R as n}from"./chunks/framework.3LEfkZv-.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/git/做项目的分支合并.md","filePath":"docs/git/做项目的分支合并.md","lastUpdated":1702735948000}'),e={name:"docs/git/做项目的分支合并.md"},p=n(`<blockquote><p>前言：远程有一个FRESH-2735仓库，我们3个开发需要各自创建 FRESH-2735-haidi.yi(自己名字) 分支，先将代码提交到 FRESH-2735-haidi.yi ，再将FRESH-2735-haidi.yi分支合并到FRESH-2735分支。</p></blockquote><h4 id="创建本地fresh-2735d分支" tabindex="-1">创建本地FRESH-2735D分支 <a class="header-anchor" href="#创建本地fresh-2735d分支" aria-label="Permalink to &quot;创建本地FRESH-2735D分支&quot;">​</a></h4><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>git checkout -b FRESH-2735D</span></span></code></pre></div><p>git checkout -b命令会创建一个新的分支，并将当前分支下的所有文件复制到新创建的分支下</p><h4 id="创建本地fresh-2735-haidi-yi分支" tabindex="-1">创建本地FRESH-2735-haidi.yi分支 <a class="header-anchor" href="#创建本地fresh-2735-haidi-yi分支" aria-label="Permalink to &quot;创建本地FRESH-2735-haidi.yi分支&quot;">​</a></h4><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>cms-public-pkgs git:(FRESH-2735) git checkout -b FRESH-2735-haidi.yi</span></span></code></pre></div><h4 id="将本地fresh-2735-haidi-yi分支提交到远端" tabindex="-1">将本地FRESH-2735-haidi.yi分支提交到远端 <a class="header-anchor" href="#将本地fresh-2735-haidi-yi分支提交到远端" aria-label="Permalink to &quot;将本地FRESH-2735-haidi.yi分支提交到远端&quot;">​</a></h4><p>在git add . 和 git commit -m &quot;&quot;后，将本地分支推送到远端。origin FRESH-2735-haidi.yi表示的是推送到远端的FRESH-2735-haidi.yi分支。此时远端其实还没有origin FRESH-2735-haidi.yi分支，但是git push -u origin FRESH-2735-haidi.yi这条命令会在远端默认创建不存在的分支：FRESH-2735-haidi.yi</p><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>cms-public-pkgs git:(FRESH-2735-haidi.yi) git push -u origin FRESH-2735-haidi.yi</span></span></code></pre></div><h4 id="切换到本地fresh-2735分支-合并-merge-别人提交到远端fresh-2735仓库的代码到本地-push前要先pull" tabindex="-1">切换到本地FRESH-2735分支，合并(merge)别人提交到远端FRESH-2735仓库的代码到本地（push前要先pull） <a class="header-anchor" href="#切换到本地fresh-2735分支-合并-merge-别人提交到远端fresh-2735仓库的代码到本地-push前要先pull" aria-label="Permalink to &quot;切换到本地FRESH-2735分支，合并(merge)别人提交到远端FRESH-2735仓库的代码到本地（push前要先pull）&quot;">​</a></h4><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>cms-public-pkgs git:(FRESH-2735) git pull origin FRESH-2735</span></span></code></pre></div><p>此时会出现如下提示，要求选择git pull的时候是使用merge还是rebase合并代码：</p><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>cms-public-pkgs git:(FRESH-2735) git pull origin FRESH-2735            </span></span>
<span class="line"><span>remote: Counting objects: 9, done.</span></span>
<span class="line"><span>remote: Compressing objects: 100% (9/9), done.</span></span>
<span class="line"><span>remote: Total 9 (delta 0), reused 5 (delta 0)</span></span>
<span class="line"><span>Unpacking objects: 100% (9/9), 7.79 KiB | 2.60 MiB/s, done.</span></span>
<span class="line"><span>From gitlab.corp.qunar.com:qnpm/cms-public-pkgs</span></span>
<span class="line"><span> * branch              FRESH-2735 -&gt; FETCH_HEAD</span></span>
<span class="line"><span> * [new branch]        FRESH-2735 -&gt; origin/FRESH-2735</span></span>
<span class="line"><span>hint: You have divergent branches and need to specify how to reconcile them.</span></span>
<span class="line"><span>hint: You can do so by running one of the following commands sometime before</span></span>
<span class="line"><span>hint: your next pull:</span></span>
<span class="line"><span>hint: </span></span>
<span class="line"><span>hint:   git config pull.rebase false  # merge</span></span>
<span class="line"><span>hint:   git config pull.rebase true   # rebase</span></span>
<span class="line"><span>hint:   git config pull.ff only       # fast-forward only</span></span>
<span class="line"><span>hint: </span></span>
<span class="line"><span>hint: You can replace &quot;git config&quot; with &quot;git config --global&quot; to set a default</span></span>
<span class="line"><span>hint: preference for all repositories. You can also pass --rebase, --no-rebase,</span></span>
<span class="line"><span>hint: or --ff-only on the command line to override the configured default per</span></span>
<span class="line"><span>hint: invocation.</span></span>
<span class="line"><span>fatal: Need to specify how to reconcile divergent branches.</span></span></code></pre></div><p>选择使用merge合并代码，根据提示，在命令行输入：</p><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>cms-public-pkgs git:(FRESH-2735) git config pull.rebase false</span></span></code></pre></div><p>然后，重新执行git pull拉取远程代码合并到当前本地分支：</p><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>cms-public-pkgs git:(FRESH-2735) git pull origin FRESH-2735</span></span></code></pre></div><p>执行上述代码后，本地分支FRESH-2735内容会发生改变(别人改的其他文件的内容此时已经同步到自己本地了)，可以看到具体哪些文件改变了多少行：</p><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>cms-public-pkgs git:(FRESH-2735) git pull origin FRESH-2735  </span></span>
<span class="line"><span>From gitlab.corp.qunar.com:qnpm/cms-public-pkgs</span></span>
<span class="line"><span> * branch              FRESH-2735 -&gt; FETCH_HEAD</span></span>
<span class="line"><span>Merge made by the &#39;ort&#39; strategy.</span></span>
<span class="line"><span> packages/cmsQfcLogin/src/index.js          | 869 +++++++++++++++++++++++++++++++++++++++++++-----------------------------------------</span></span>
<span class="line"><span> packages/cmsQfcLogin/src/index.scss        | 159 ++++++----------</span></span>
<span class="line"><span> packages/cmsQfcLogin/src/verify/index.less |   4 +-</span></span>
<span class="line"><span> 3 files changed, 511 insertions(+), 521 deletions(-)</span></span></code></pre></div><h4 id="合并fresh-2735-haidi-yi到fresh-2735分支" tabindex="-1">合并FRESH-2735-haidi.yi到FRESH-2735分支 <a class="header-anchor" href="#合并fresh-2735-haidi-yi到fresh-2735分支" aria-label="Permalink to &quot;合并FRESH-2735-haidi.yi到FRESH-2735分支&quot;">​</a></h4><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>cms-public-pkgs git:(FRESH-2735) git merge FRESH-2735-haidi.yi</span></span>
<span class="line"><span>Merge made by the &#39;ort&#39; strategy.</span></span>
<span class="line"><span> packages/cmsQfcJobList/src/index.js | 1 +</span></span>
<span class="line"><span> 1 file changed, 1 insertion(+)</span></span></code></pre></div><h4 id="将本地分支fresh-2735推送到远程分支fresh-2735" tabindex="-1">将本地分支FRESH-2735推送到远程分支FRESH-2735 <a class="header-anchor" href="#将本地分支fresh-2735推送到远程分支fresh-2735" aria-label="Permalink to &quot;将本地分支FRESH-2735推送到远程分支FRESH-2735&quot;">​</a></h4><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>cms-public-pkgs git:(FRESH-2735) git push -u origin FRESH-2735</span></span></code></pre></div><h4 id="切换回自己名字的分支fresh-2735-haidi-yi-以后还是先提交到自己分支再合并到fresh-2735分支" tabindex="-1">切换回自己名字的分支FRESH-2735-haidi.yi（以后还是先提交到自己分支再合并到FRESH-2735分支） <a class="header-anchor" href="#切换回自己名字的分支fresh-2735-haidi-yi-以后还是先提交到自己分支再合并到fresh-2735分支" aria-label="Permalink to &quot;切换回自己名字的分支FRESH-2735-haidi.yi（以后还是先提交到自己分支再合并到FRESH-2735分支）&quot;">​</a></h4><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>cms-public-pkgs git:(FRESH-2735) git checkout FRESH-2735-haidi.yi</span></span>
<span class="line"><span>Switched to branch &#39;FRESH-2735-haidi.yi&#39;</span></span>
<span class="line"><span>Your branch is up to date with &#39;origin/FRESH-2735-haidi.yi&#39;.</span></span></code></pre></div><h3 id="执行完上述步骤后-后续git执行顺序" tabindex="-1">执行完上述步骤后，后续git执行顺序： <a class="header-anchor" href="#执行完上述步骤后-后续git执行顺序" aria-label="Permalink to &quot;执行完上述步骤后，后续git执行顺序：&quot;">​</a></h3><h4 id="在自己名字的分支fresh-2735-haidi-yi下执行" tabindex="-1">在自己名字的分支<code>FRESH-2735-haidi.yi</code>下执行： <a class="header-anchor" href="#在自己名字的分支fresh-2735-haidi-yi下执行" aria-label="Permalink to &quot;在自己名字的分支\`FRESH-2735-haidi.yi\`下执行：&quot;">​</a></h4><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>cms-public-pkgs git:(FRESH-2735-haidi.yi) git add .</span></span>
<span class="line"><span>cms-public-pkgs git:(FRESH-2735-haidi.yi) git commit -m &quot;&quot;</span></span>
<span class="line"><span>cms-public-pkgs git:(FRESH-2735-haidi.yi) git push origin FRESH-2735-haidi.yi</span></span></code></pre></div><h4 id="切换到本地fresh-2735分支-git-checkout-fresh-2735-执行" tabindex="-1">切换到本地FRESH-2735分支(git checkout FRESH-2735)，执行： <a class="header-anchor" href="#切换到本地fresh-2735分支-git-checkout-fresh-2735-执行" aria-label="Permalink to &quot;切换到本地FRESH-2735分支(git checkout FRESH-2735)，执行：&quot;">​</a></h4><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>cms-public-pkgs git:(FRESH-2735) git pull origin FRESH-2735</span></span></code></pre></div><h4 id="切换到fresh-2735-haidi-yi去mergefresh-2735分支-向主分支和代码时-最后先将主分支代码合并到自己分支上-然后再合并到主分支。这样的话有冲突是在自己分支上处理" tabindex="-1">切换到FRESH-2735-haidi.yi去mergeFRESH-2735分支（向主分支和代码时，最后先将主分支代码合并到自己分支上，然后再合并到主分支。这样的话有冲突是在自己分支上处理） <a class="header-anchor" href="#切换到fresh-2735-haidi-yi去mergefresh-2735分支-向主分支和代码时-最后先将主分支代码合并到自己分支上-然后再合并到主分支。这样的话有冲突是在自己分支上处理" aria-label="Permalink to &quot;切换到FRESH-2735-haidi.yi去mergeFRESH-2735分支（向主分支和代码时，最后先将主分支代码合并到自己分支上，然后再合并到主分支。这样的话有冲突是在自己分支上处理）&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cms</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pkgs </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FRESH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2735</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">haidi.yi) git merge </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FRESH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2735</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cms</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pkgs </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FRESH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2735</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">haidi.yi) git push origin </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FRESH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2735</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">haidi.yi</span></span></code></pre></div><h4 id="切换到fresh-2735分支合并fresh-2735-haidi-yi分支的代码-然后提交。-由于已经在fresh-2735-haidi-yi分支上处理过冲突了-所以再向fresh-2735分支合并时一定没有冲突了" tabindex="-1">切换到FRESH-2735分支合并FRESH-2735-haidi.yi分支的代码，然后提交。（由于已经在FRESH-2735-haidi.yi分支上处理过冲突了，所以再向FRESH-2735分支合并时一定没有冲突了） <a class="header-anchor" href="#切换到fresh-2735分支合并fresh-2735-haidi-yi分支的代码-然后提交。-由于已经在fresh-2735-haidi-yi分支上处理过冲突了-所以再向fresh-2735分支合并时一定没有冲突了" aria-label="Permalink to &quot;切换到FRESH-2735分支合并FRESH-2735-haidi.yi分支的代码，然后提交。（由于已经在FRESH-2735-haidi.yi分支上处理过冲突了，所以再向FRESH-2735分支合并时一定没有冲突了）&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cms</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pkgs </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FRESH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2735</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) git merge </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FRESH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2735</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">haidi.yi</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cms</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pkgs </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FRESH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2735</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) git push origin </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FRESH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2735</span></span></code></pre></div>`,34),t=[p];function h(l,c,d,g,r,o){return i(),a("div",null,t)}const E=s(e,[["render",h]]);export{u as __pageData,E as default};
