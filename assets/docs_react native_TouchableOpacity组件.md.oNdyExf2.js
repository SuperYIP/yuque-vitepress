import{_ as a,o as s,c as i,R as t}from"./chunks/framework.3LEfkZv-.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/react native/TouchableOpacity组件.md","filePath":"docs/react native/TouchableOpacity组件.md","lastUpdated":1702735041000}'),e={name:"docs/react native/TouchableOpacity组件.md"},h=t(`<p>RN中的点击事件组件，想要某个组件可以添加点击事件，需要将那个组件被TouchableOpacity组件包裹，TouchableOpacity中可正常设置样式。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TouchableOpacity</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    activeOpacity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onPress</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openLabelLayer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(listLabel)}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    hitSlop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{{ top: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, left: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, right: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, bottom: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="touchableopacity中有一些常用的属性" tabindex="-1">TouchableOpacity中有一些常用的属性 <a class="header-anchor" href="#touchableopacity中有一些常用的属性" aria-label="Permalink to &quot;TouchableOpacity中有一些常用的属性&quot;">​</a></h3><h4 id="onpress-点击事件函数在这块声明。" tabindex="-1">onPress：点击事件函数在这块声明。 <a class="header-anchor" href="#onpress-点击事件函数在这块声明。" aria-label="Permalink to &quot;onPress：点击事件函数在这块声明。&quot;">​</a></h4><h4 id="activeopacity-点击时组件的透明度变化-默认值为0-2-设置为1时-点击时组件的透明度不变。" tabindex="-1">activeOpacity：点击时组件的透明度变化，默认值为0.2，设置为1时，点击时组件的透明度不变。 <a class="header-anchor" href="#activeopacity-点击时组件的透明度变化-默认值为0-2-设置为1时-点击时组件的透明度不变。" aria-label="Permalink to &quot;activeOpacity：点击时组件的透明度变化，默认值为0.2，设置为1时，点击时组件的透明度不变。&quot;">​</a></h4><h4 id="hitslop-扩大该组件的实际可点击区域-可在上下左右4个方向扩大-该属性不会影响组件的实际大小。" tabindex="-1">hitSlop：扩大该组件的实际可点击区域，可在上下左右4个方向扩大；该属性不会影响组件的实际大小。 <a class="header-anchor" href="#hitslop-扩大该组件的实际可点击区域-可在上下左右4个方向扩大-该属性不会影响组件的实际大小。" aria-label="Permalink to &quot;hitSlop：扩大该组件的实际可点击区域，可在上下左右4个方向扩大；该属性不会影响组件的实际大小。&quot;">​</a></h4>`,6),l=[h];function n(p,k,r,c,o,d){return s(),i("div",null,l)}const g=a(e,[["render",n]]);export{y as __pageData,g as default};
