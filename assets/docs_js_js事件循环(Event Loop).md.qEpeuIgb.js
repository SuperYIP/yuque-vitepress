import{_ as o,o as t,c as e,R as s}from"./chunks/framework.3LEfkZv-.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/js/js事件循环(Event Loop).md","filePath":"docs/js/js事件循环(Event Loop).md","lastUpdated":1702735874000}'),a={name:"docs/js/js事件循环(Event Loop).md"},n=s('<h3 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h3><blockquote><p>参考： 阮一峰：<a href="https://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noreferrer">https://www.ruanyifeng.com/blog/2014/10/event-loop.html</a></p></blockquote><p>事件循环(Even Loop)其实就是JS的运行机制，是一种处理异步操作的机制。JS 主线程不断的循环往复的从任务队列中读取任务，执行任务，这种运行机制称为事件循环(event loop)。事件循环的原理是将所有的异步任务放入一个事件队列中，然后依次执行队列中的任务，直到队列为空为止。</p><p>所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入&quot;任务队列&quot;（task queue）的任务，只有&quot;任务队列&quot;通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</p><p>在事件循环中，任务被分为两种类型：宏任务和微任务。宏任务是指由浏览器提供的<strong>异步任务，比如定时器、DOM事件和网络请求</strong>等。微任务是指由JavaScript引擎提供的异步任务，比如Promise的回调函数、MutationObserver的回调函数等。</p><p><strong>微任务的执行优先级高于宏任务，即微任务中的所有任务都会在下一个宏任务之前执行完毕</strong> 。当一个宏任务执行完毕后，会先执行微任务队列中的所有任务，直到微任务队列为空，然后再从宏任务队列中取出一个任务执行，以此类推。</p><p><strong>在当前的微任务没有执行完成时，是不会执行下一个宏任务的。</strong></p><p>在执行一个宏任务时，如果它中途产生了微任务，那么这些微任务会被添加到微任务队列中，等待当前宏任务执行完成后依次执行。当所有微任务都执行完成后，才会从宏任务队列中取出下一个任务执行。</p><p>所以事件循环是这样的：</p><ul><li>执行同步代码</li><li>执行所有微任务</li><li>执行一个宏任务</li><li>重复执行上述3步。</li></ul>',10),r=[n];function p(l,_,c,i,u,d){return t(),e("div",null,r)}const f=o(a,[["render",p]]);export{m as __pageData,f as default};
