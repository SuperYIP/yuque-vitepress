import{_ as s,c as a,o as e,U as i}from"./chunks/framework.fNqm3e01.js";const n="/assets/87d6e0ab486b7e04ee0969f3fc583b4f.h448Om9R.png",t="/assets/281d1deade366e92ca0713744c7e282d.dfci0uso.png",u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/前端知识/package.json和package-lock.json.md","filePath":"docs/前端知识/package.json和package-lock.json.md","lastUpdated":1704357645000}'),p={name:"docs/前端知识/package.json和package-lock.json.md"},o=i('<blockquote><p>参考： <a href="https://juejin.cn/post/7137110113277444126" target="_blank" rel="noreferrer">https://juejin.cn/post/7137110113277444126</a></p></blockquote><p><img src="'+n+`" alt="image.png"></p><h3 id="peerdependencies" tabindex="-1"><strong>peerDependencies</strong> <a class="header-anchor" href="#peerdependencies" aria-label="Permalink to &quot;**peerDependencies**&quot;">​</a></h3><p>举例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;your-package-name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;peerDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;other-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^2.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>表示我的包在运行时依赖于另一个模块，但不会将其打包到我的项目中。也就是我的包不是单独运行的，是作为子包让别人使用的，并且我明确使用者一定会安装我peerDependencies里的包。这样的话，我的依赖中就没有了<code>other-package</code>依赖，使用者的node_modules里就不会有两份一样的<code>other-package</code>了。<br><img src="`+t+'" alt="image.png"></p>',6),c=[o];function l(h,k,r,d,g,E){return e(),a("div",null,c)}const m=s(p,[["render",l]]);export{u as __pageData,m as default};
